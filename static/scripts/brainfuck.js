// Generated by CoffeeScript 1.5.0
var BrainFuck, Data, Node, clean, find_matching_brace, verify;

Node = (function() {

  function Node(prev, next) {
    this.prev = prev;
    this.next = next;
    this.value = 0;
  }

  return Node;

})();

Data = (function() {

  function Data(data) {
    this.init_data(data);
    this.current = this.head;
  }

  Data.prototype.init_data = function(data) {
    return this.head = new Node();
  };

  Data.prototype.next = function() {
    if (!this.current.next) {
      this.current.next = new Node(this.current);
    }
    return this.current = this.current.next;
  };

  Data.prototype.prev = function() {
    if (!this.current.prev) {
      this.current.prev = new Node(void 0, this.current);
      this.head = this.current.prev;
    }
    return this.current = this.current.prev;
  };

  return Data;

})();

exports.BrainFuck = BrainFuck = (function() {

  function BrainFuck(max_value) {
    this.max_value = max_value || 255;
  }

  BrainFuck.prototype.print = function(v) {
    return process.stdout.write(String.fromCharCode(v));
  };

  BrainFuck.prototype.run_cmd = function(cmd) {
    switch (cmd) {
      case ">":
        return this.data.next();
      case "<":
        return this.data.prev();
      case "+":
        return this.data.current.value++;
      case "-":
        return this.data.current.value--;
      case ".":
        return this.print(this.data.current.value);
    }
  };

  BrainFuck.prototype.execute = function(program) {
    var cmd, cmd_ptr, stack;
    program = clean(program);
    verify(program);
    stack = [];
    this.data = new Data();
    cmd_ptr = 0;
    while (cmd_ptr < program.length) {
      cmd = program[cmd_ptr];
      cmd_ptr += 1;
      switch (cmd) {
        case "[":
          if (this.data.current.value) {
            stack.push(cmd_ptr);
          } else {
            cmd_ptr = find_matching_brace(program, cmd_ptr);
          }
          break;
        case "]":
          if (this.data.current.value) {
            cmd_ptr = stack[stack.length - 1];
          } else {
            stack.pop();
          }
          break;
        default:
          this.run_cmd(cmd);
      }
    }
  };

  return BrainFuck;

})();

clean = function(program) {
  return program.replace(/[^\[\]><+\-\.,]/gm, '');
};

verify = function(program) {
  var i, n, _i, _len;
  n = 0;
  for (_i = 0, _len = program.length; _i < _len; _i++) {
    i = program[_i];
    if (i === "[") {
      n++;
    } else if (i === "]") {
      n--;
      if (n < 0) {
        break;
      }
    }
  }
  if (n < 0) {
    throw "Unmatched Braces";
  }
};

find_matching_brace = function(program, i) {
  var cmd, open_braces;
  open_braces = 1;
  while (open_braces) {
    cmd = program[i++];
    if (cmd === "[") {
      open_braces++;
    }
    if (cmd === "]") {
      open_braces--;
    }
  }
  return i;
};
